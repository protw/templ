created: 20200411074231889
modified: 20200413112616483
tags: 
title: Pandemic end determination code

```matlab
# CODE FOR DETERMINATION OF THE PANDEMIC END
# Author: Olegh Bondarenko, https://protw.github.io/oleghbond
# Date: 2020-03-29
function covid_anim
  # action == 1 - launches data update from the source and saves locally
  # action == 0 - uses the last data set stored locally
  action = 0;
  disp(ifelse(action,'UPDATING THE DATA, STORE THEM LOCALLY, RETRIEVING THE DATA','RETRIEVING THE DATA'))
  if action
    DATA = check_covid_data;
    save data.mat DATA
  else
    load data
  endif
  load population
  confirmed = DATA.confirmed;
  deaths = DATA.deaths;
  recovered = DATA.recovered;
  country = DATA.country;
  days = DATA.days;
  rep_date = DATA.date;
  
  flt = {'Ukraine' 'US' 'Italy' 'China' 'France' 'Germany' ...
         'Korea South' 'Iran' 'Japan' 'United Kingdom'}; 
         # 'Poland' 'Finland' 'Bangladesh' 'Iran' 
         # 'Egypt' 'Spain' 'Singapore' 'Venezuela'
  # 'y_adjust' is of the same size and order as in 'flt'
  # it used to adjust vertical position of label 'country'
  
  x = days-days(1);
  y = (deaths'+recovered')./confirmed'*100;
  [~,iflt,jflt]=intersect(country,flt);
  y = y(:,iflt);
  date_range_str = [datestr(days(1),29) ' - ' datestr(days(end),29)];

  Confirmed = confirmed;
  Deaths = deaths;
  Recovered = recovered;
  X = x;
  Y = y;

  disp('BUILDING THE ANIMATION')
  figure(1); set(gcf,'Visible','off');
  for j = 2:length(days)  
    confirmed = Confirmed(:,1:j);
    deaths = Deaths(:,1:j);
    recovered = Recovered(:,1:j);
    x = X(1:j);
    y = Y(1:j,:);
    
    for i = 1:length(flt)
      legend_flt{i} = sprintf('%s - %d, %d, %d', flt{jflt(i)}, ...
        confirmed(iflt(i),end), deaths(iflt(i),end), recovered(iflt(i),end));
    endfor

    y_world = (sum(deaths) + sum(recovered))./sum(confirmed)*100;
    y_world = y_world';
    y = [y y_world];
    legend_flt{i+1} = sprintf('%s - %d, %d, %d', 'World', ...
        sum(confirmed)(end), sum(deaths)(end), sum(recovered)(end));
    date_range_str = datestr(days(j),29);
    
    figure(1)
    plot(x,y);
    set(gca,'ylim',[0 100],'xlim',[0 max(X)])
    xlabel(['days, starting from ' datestr(days(1),29)])
    ylabel('\alpha = (deaths+recovered)/confirmed, %')
    title(['COVID-19: ' date_range_str]);
    legend(legend_flt,'location','northwest');
    legend('boxoff')
    grid on
    text(x(end)*ones(1,size(y,2)), y(end,:), [flt(jflt) 'World']);
    text(1,98.5,'Country - confirmed, deaths, recovered')
    
    printf('PRINTING PNG # %d\n',j)
    fig_file_name = ['movie\' datestr(days(j),'yymmdd') ' (r+d)div(c).png'];
    print(fig_file_name)
  endfor
  figure(1); set(gcf,'Visible','on');
  disp('COMPOSING THE GIF')
  system('magick -delay 35 -loop 3 movie\200*.png closed-rel-confirmed.gif');
  disp('DONE!')
endfunction

function DATA = check_covid_data
  DAT = convert_struct;
  i = 0;
  for [d, label] = DAT
    country_prov = {d.Dat.country};
    country = unique(country_prov);
    days = d.days;
    dat = [];
    for j = 1:length(d.Dat)
      dat = [dat; d.Dat(j).dat];
    endfor
    dats = [];
    for c = country
      ind = strcmp(country_prov,c);
      dats = [dats; sum(dat(ind,:),1)];
    endfor
    DATA.(label) = dats;
    if !i++
      DATA.country = country;
      DATA.days = days;
      label0 = label;
    else
      k = 1;
      ident(k++) = identicsarr(DATA.country,country);
      ident(k++) = identicnarr(DATA.days,days);
      ident(k) = all(size(DATA.(label0)) == size(DATA.(label)));
      if !all(ident)
        printf('Data sets %s and %s are not identical!\n',label0,label)
        printf('Ident values = %s\n',mat2str(ident))
        error('PLEASE CHECK THE DATA!')
      endif
    endif
  endfor
  DATA.country = DATA.country';
  DATA.date = datestr(now,31);
endfunction

function ident = identicnarr(narr1,narr2)
  if all(size(narr1) == size(narr2)) && all(narr1(:) == narr2(:))
    ident = 1;
  else
    ident = 0;
  endif
endfunction

function ident = identicsarr(sarr1,sarr2)
  if all(size(sarr1) == size(sarr2)) && all(strcmp(sarr1(:),sarr2(:)))
    ident = 1;
  else
    ident = 0;
  endif
endfunction

function DAT = convert_struct
  data_src = get_data_src;
  idat = 1;
  for [web_address, label] = data_src
    disp([label ' = ' web_address])
    sdat = urlread(web_address);
    sdat = strrep(sdat,'"Korea, South"','Korea South');
    sdat = strrep(sdat,'"Bonaire, Sint Eustatius and Saba"',...
      'Bonaire Sint Eustatius and Saba');
    lines = strsplit(sdat,{'\r' '\n'});
    head = strsplit(lines{1},',');
    for i = 5:length(head)
      mdy = str2num(strrep(head{i},'/',','));
      days(i-4) = datenum(mdy(3)+2000,mdy(1),mdy(2));
    endfor
    DAT.(label).days = days;
    for i = 2:length(lines)
      if length(lines{i}) == 0, break, endif
      dat = strsplit(lines{i},',');
      i1 = i - 1;
      Dat(i1).province = dat{1};
      Dat(i1).country = dat{2};
      Dat(i1).lat = str2num(dat{3});
      Dat(i1).long = str2num(dat{4});
      Dat(i1).dat = str2num(strjoin(dat(5:end),' '));
    endfor
    DAT.(label).Dat = Dat;
  endfor
endfunction

function data_src = get_data_src
  time_series_covid19_path = [...
    'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/'...
    'master/csse_covid_19_data/csse_covid_19_time_series/'];
  time_series_covid19_confirmed_global = [time_series_covid19_path ...
    'time_series_covid19_confirmed_global.csv'];
  time_series_covid19_deaths_global = [time_series_covid19_path ...
    'time_series_covid19_deaths_global.csv'];
  time_series_covid19_recovered_global = [time_series_covid19_path ...
    'time_series_covid19_recovered_global.csv'];
    
  data_src.confirmed = time_series_covid19_confirmed_global;
  data_src.deaths = time_series_covid19_deaths_global;
  data_src.recovered = time_series_covid19_recovered_global;
endfunction
```