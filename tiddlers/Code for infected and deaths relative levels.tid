created: 20200411143652985
modified: 20200413112730903
tags: 
title: Code for infected and deaths relative levels

```matlab
# CODE FOR ANALYSIS OF THE PANDEMIC 
# Author: Olegh Bondarenko, https://protw.github.io/oleghbond
# Date: 2020-04-12
function covid2_anim
  # action == 1 - launches data update from the source and saves locally
  # action == 0 - uses the last data set stored locally
  action = 01;
  disp(ifelse(action,'UPDATING THE DATA, APPEND & STORE THEM LOCALLY, RETRIEVING THE DATA','RETRIEVING THE DATA'))
  Dat = io_data(action);
  # data selection and analysis
  cntrs_sel = {'USA', 'Spain', 'Italy', 'France', 'Germany',... 
    'UK', 'Turkey', 'Switzerland', 'Belgium',...
    'Netherlands', 'Canada', 'Brazil', 'Austria', 'S. Korea',...
    'Russia', 'Sweden', 'Norway', 'Australia', 'India', 'Chile',... 
    'Czechia', 'Poland', 'Romania', 'Japan',...
    'Pakistan', 'Mexico', 'Finland', 'Serbia',...
    'Greece', 'South Africa', 'Argentina', 'Ukraine', 'Iceland',...
    'Singapore', 'Algeria', 'Egypt', 'Croatia', 'New Zealand',...
    'Iraq', 'Moldova', 'Hong Kong', 'Lithuania', 'Hungary',...
    'Belarus', 'Bulgaria'};
    # 'Iran', 'Denmark', 

  disp('CYCLE THROUGH THE CHRONOLOGICAL SEQUENCE')
  tmarks = fieldnames(Dat);
  figure(1); set(gcf,'Visible','off');
  for i = 1:length(tmarks)
    tmark = tmarks{i};
    dat = Dat.(tmark);

    [infected_prcnt, deaths_prcnt, countries] = fetch_info(dat);

    [~,indx2] = intersect(countries,cntrs_sel);
    inf_p = infected_prcnt(indx2);
    dea_p = deaths_prcnt(indx2);
    cntrs_sel2 = countries(indx2);
    
    if i == 1
      inf_p_trace = inf_p;
      dea_p_trace = dea_p;
      loglog(inf_p, dea_p,'o')
    else
      inf_p_trace = [inf_p_trace; inf_p];
      dea_p_trace = [dea_p_trace; dea_p];
      loglog(inf_p, dea_p,'o', inf_p_trace, dea_p_trace,'-')
    endif
    
    text(inf_p*1.05,dea_p,cntrs_sel2)
    xlabel('Infected, % of the whole population')
    ylabel('COVID-19 Deaths, % of the whole population')
    title(['COVID-19 cases on ' tmark(2:5) '-' tmark(6:7) '-' tmark(8:9)])
    grid on
    xlim = get(gca,'xlim');
    xlim(1) = 0.9;  
    ylim = get(gca,'ylim');
    ylim = [2e-4 0.3];
    set(gca,'xlim',xlim,'ylim',ylim)
    
    printf('PRINTING PNG # %d %s\n',i,tmark(4:end))
    fig_file_name = ['movie2\'  tmark(4:9) ' deaths-vs-infected.png'];
    print(fig_file_name)
  endfor
  figure(1); set(gcf,'Visible','on');
  disp('COMPOSING THE GIF')
  system('magick -delay 100 -loop 3 movie2\200*.png deaths-vs-infected.gif');
  disp('DONE!')
  1;
endfunction

function [infected_prcnt, deaths_prcnt, countries] = fetch_info(dat)
  tc1m = dat.Tot_Cases_1M_pop;
  d1m = dat.Deaths_1M_pop;
  t1m = dat.Tests_1M_pop;
  indx = !isnan(tc1m) & !isnan(d1m) & !isnan(t1m);
  tc1m = tc1m(indx);
  d1m = d1m(indx);
  t1m = t1m(indx);
  countries = dat.Country_Other(indx);

  infected_prcnt = tc1m./t1m*100;
  deaths_prcnt = d1m./(tc1m./t1m)*100/1e6;
endfunction

function Dat = io_data(action)
  data_file = 'worldometers_covid.mat';
  if action  
    time_mark = ['D' datestr(now,30)];
    dat = get_data;
    if exist(data_file,'file')
      load(data_file);
    endif  
    Dat.(time_mark) = dat;
    save(data_file,'Dat');
  else
    load(data_file);
  endif
endfunction

function dat = get_data
  # Load data
  data_src = 'https://www.worldometers.info/coronavirus/';
  sdat = urlread(data_src);
  disp(data_src)
  # Select 1st or 2nd table
  tbl_no = 1;
  s = regexp(sdat,'<table');
  e =  regexp(sdat,'</table>','end');
  sdat = sdat(s(tbl_no):e(tbl_no));
  # Converts to CSV
  pat_rep = {
    '[\r\n\,]+'                                         ''
    '(<br\s*/>|&nbsp;)'                                 ' '
    '</*(table|thead|tbody|nobr|a|span|strong)[^>]*>'   ''
    '<(tr|th|td)[^>]*>'                                 ''
    '</(th|td)>'                                        '\,'
    '\,</tr>'                                           '\n'
    '(\,[ ]+|[ ]+\,)'                                   '\,'
    '\n '                                               '\n'
    '/ '                                                '/'
  };
  for i = 1:size(pat_rep,1)
    sdat = regexprep(sdat,pat_rep{i,1},pat_rep{i,2});
  endfor
  # Build the structure: 
  # each column turns into a field having a data array
  csdat=strsplit(sdat,'\n');
  header = strsplit(regexprep(csdat{1},'[/ ]','_'),',');
  dat = cell2struct(cell(size(header)),header,2);
  for i = 2:length(csdat)-1
    csdat_i = strsplit(csdat{i},',','collapsedelimiters',false);
    dat.(header{1}) = [dat.(header{1}) csdat_i(1)];
    for j = 2:length(header)
      dat.(header{j}) = [dat.(header{j}) ...
        ifelse(isempty(csdat_i{j}),nan,str2num(csdat_i{j}))];
    endfor
  endfor
endfunction
```